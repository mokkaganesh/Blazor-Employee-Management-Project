@page "/signup"
@using System.Data.SqlClient
@using System.Security.Cryptography
@inject NavigationManager Navigation

@code {
    private int EmployeeId { get; set; }
    private string Password { get; set; }
    private string ConfirmPassword { get; set; }
    private string ErrorMessage { get; set; }
    private string SuccessMessage { get; set; }
    private bool IsLoading { get; set; }

    private async Task HandleSignup()
    {
        IsLoading = true;
        await Task.Delay(1000);

        if (Password != ConfirmPassword)
        {
            IsLoading = false;
            ErrorMessage = "Passwords do not match.";
            return;
        }

        try
        {
            bool isRegistered = await RegisterUserAsync(EmployeeId, Password);
            if (isRegistered)
            {
                SuccessMessage = "Registration successful. You can now log in.";
                Navigation.NavigateTo("/");
            }
            else
            {
                IsLoading = false;
                ErrorMessage = "Employee ID already exists.";
            }
        }
        catch (Exception ex)
        {
            IsLoading = false;
            ErrorMessage = $"An error occurred during registration: {ex.Message}";
        }
    }

    private async Task<bool> RegisterUserAsync(int employeeId, string password)
    {
        const string connectionString = "Server=DESKTOP-JNNAJ9C\\SQLEXPRESS; Database=EmployeeDb; Trusted_Connection=True;";
        const string checkQuery = "SELECT COUNT(1) FROM Employees WHERE EmployeeId = @EmployeeId";
        const string insertQuery = "INSERT INTO Employees (EmployeeId, Password) VALUES (@EmployeeId, @Password)";

        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            using (var checkCommand = new SqlCommand(checkQuery, connection))
            {
                checkCommand.Parameters.Add("@EmployeeId", System.Data.SqlDbType.Int).Value = employeeId;
                int count = (int)await checkCommand.ExecuteScalarAsync();
                if (count > 0)
                {
                    return false; // Employee ID already exists
                }
            }

            using (var insertCommand = new SqlCommand(insertQuery, connection))
            {
                insertCommand.Parameters.Add("@EmployeeId", System.Data.SqlDbType.Int).Value = employeeId;
                insertCommand.Parameters.Add("@Password", System.Data.SqlDbType.NVarChar).Value = password;

                await insertCommand.ExecuteNonQueryAsync();
                return true;
            }
        }
    }
}

<style>
    .login-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    }

    .login-form label {
        font-weight: bold;
        color: #333;
    }

    .login-form input[type="text"],
    .login-form input[type="password"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 3px;
        background-color: #fff;
        transition: border-color 0.2s, box-shadow 0.2s;
    }

    .login-form input[type="text"]:focus,
    .login-form input[type="password"]:focus {
        border-color: #007bff;
        outline: none;
        box-shadow: 0 0 10px rgba(0, 123, 255, 0.2);
    }

    .login-form .btn-primary {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 3px;
        background-color: #007bff;
        color: #fff;
        font-weight: bold;
        transition: background-color 0.2s;
    }

    .login-form .btn-primary:hover {
        background-color: #0056b3;
    }

    .error-message {
        color: #ff0000;
        font-size: 14px;
        margin-bottom: 15px;
    }

    .success-message {
        color: #28a745;
        font-size: 14px;
        margin-bottom: 15px;
    }

    .signup-link {
        text-align: center;
        margin-top: 20px;
    }

    .loading-container {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    #html-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #fcd779;
        border-top: 4px solid white;
        border-radius: 50%;
        animation: rotate 1.2s linear infinite;
    }

   
</style>

<div class="container mt-5">
    @if (IsLoading)
    {
        <div class="loading-container">
            <div id="html-spinner"></div>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6 offset-md-3">
                <div class="login-form">
                    <h3 class="text-center mb-4">Signup</h3>

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="error-message">@ErrorMessage</div>
                    }

                    @if (!string.IsNullOrEmpty(SuccessMessage))
                    {
                        <div class="success-message">@SuccessMessage</div>
                    }

                    <EditForm Model="@this" OnValidSubmit="HandleSignup">
                        <div class="form-group">
                            <label for="employeeId">Employee ID</label>
                            <InputNumber id="employeeId" class="form-control" @bind-Value="EmployeeId" />
                        </div>

                        <div class="form-group">
                            <label for="password">New Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="Password" />
                        </div>

                        <div class="form-group">
                            <label for="confirmPassword">Confirm Password</label>
                            <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="ConfirmPassword" />
                        </div>

                        <button type="submit" class="btn btn-primary">Sign Up</button>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>
