@page "/logins"
@using System.Data.SqlClient
@inject NavigationManager Navigation
@code {
    private int EmployeeId { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }

    private async Task HandleLogin()
    {
        // Replace with your authentication logic
        if (AuthenticateUser(EmployeeId, Password))
        {
            Navigation.NavigateTo($"/employeepage/{EmployeeId}");
        }
        else
        {
            ErrorMessage = "Invalid Employee ID or Password.";
        }
    }

    private bool AuthenticateUser(int employeeId, string password)
    {
        string connectionString = "Server=DESKTOP-JNNAJ9C\\SQLEXPRESS; Database=EmployeeDb; Trusted_Connection=True;";
        string query = "SELECT COUNT(1) FROM Employees WHERE EmployeeId = @EmployeeId AND Password = @Password";

        using (var connection = new System.Data.SqlClient.SqlConnection(connectionString))
        {
            using (var command = new System.Data.SqlClient.SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@EmployeeId", employeeId);
                command.Parameters.AddWithValue("@Password", password);

                connection.Open();
                int count = (int)command.ExecuteScalar();
                Console.WriteLine(count);
                return count > 0;
            }
        }
    }
}

<style>
    .login-form {
        max-width: 400px;
        margin: 0 auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

        .login-form label {
            font-weight: bold;
            color: #333;
        }

        .login-form input[type="text"],
        .login-form input[type="password"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 3px;
            background-color: #fff;
            transition: border-color 0.2s;
        }

            .login-form input[type="text"]:focus,
            .login-form input[type="password"]:focus {
                border-color: #007bff;
                outline: none;
            }

        .login-form .btn-primary {
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 3px;
            background-color: #007bff;
            color: #fff;
            font-weight: bold;
            transition: background-color 0.2s;
        }

            .login-form .btn-primary:hover {
                background-color: #0056b3;
            }

    .error-message {
        color: #ff0000;
        font-size: 14px;
        margin-bottom: 15px;
    }

    .signup-link {
        text-align: center;
        margin-top: 20px;
    }
</style>

<div class="container mt-5">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="login-form">
                <h3 class="text-center mb-4">Login</h3>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="error-message">@ErrorMessage</div>
                }

                <EditForm Model="@this" OnValidSubmit="HandleLogin">

                    <div class="form-group">
                        <label for="employeeId">Employee ID</label>
                        <InputNumber id="employeeId" class="form-control" @bind-Value="EmployeeId" />
                    </div>

                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="Password" />
                    </div>

                    <button type="submit" class="btn btn-primary">Login</button>
                </EditForm>

                <div class="signup-link">
                    <a href="/signup">Click me to signup</a>
                </div>
            </div>
        </div>
    </div>
</div>
